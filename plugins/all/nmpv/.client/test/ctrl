#!/usr/bin/env python
""" NMPVC Playlist control """

import socket

from typing import Callable

import click

from kwking_helper.thread import threaded2, ThreadData


class MPV:
    def __init__(self, *addr):
        self.addr = addr

    @property
    def addr(self):
        return self._addr

    @addr.setter
    def addr(self, addr):
        self._addr = [(socket.gethostbyname(h), p) for h, p in addr]

    @property
    def url(self):
        return "http://{}:{}/api/nmpv/player"

    def run(self, name: str, args: tuple, kwargs: dict,
            on_success: Callable = None, on_error: Callable = None):

        @threaded2(True, on_success, on_error)
        def run(name, *args, **kwargs):
            ...

        ...

    def get(self, name,
            on_success: Callable, on_error: Callable):

        @threaded2(True, on_success, on_error)
        def get(name):
            ...

        ...

    def set(self, name, value,
            on_success: Callable, on_error: Callable):

        @threaded2(True, on_success, on_error)
        def set(name, value):
            ...

        ...


@click.group(invoke_without_command=True)
@click.option('-a', '--addr', type=str, metavar="<hostname>[:<port>]", multiple=True,
              help="speaker address (default port: 50870)")
@click.option('--default-port', type=int, metavar="<port>", default=50870,
              help="change default speaker port")
@click.pass_context
def cli(ctx: click.Context, addr: tuple[str, ...], default_port: int, debug: bool):
    """ Player Control (Playlist handling) """
    parsed = list()

    for idx in range(len(addr)):
        if ':' in addr[idx]:
            parsed.append(tuple(addr[idx].rsplit(':', 1)))
        else:
            parsed.append(tuple(addr[idx], default_port))

    ctx.obj = MPV(*parsed)


# @todo: add commands: 'play', 'pause', 'append', 'expand', 'pos', 'next', 'prev', 'clear', 'quit'


cli()
